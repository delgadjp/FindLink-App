service cloud.firestore {
  match /databases/{database}/documents {
    
    // This specifies that we are using version 2
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read/write their own user data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Updated rules for missingPersons collection
    match /missingPersons/{documentId} {
      allow read: if true;  // Anyone can read missing persons data
      allow create: if request.auth != null;  // Only authenticated users can create
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Rules for tips about missing persons
    match /tips-app/{tipId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Rules for case status updates
    match /case-status/{statusId} {
      allow read: if true;
      allow write: if request.auth != null &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow authenticated users to read/write reports data
    match /reports/{reportId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.uid || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Updated rules for IRF collection
    match /irf-test/{irfId} {
      // Allow users to read their own documents
      allow read: if request.auth != null && (
        // Either the document belongs to the user
        request.auth.uid == resource.data.userId ||
        // Or the user is an admin
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        // Or the document is a counter document (for generating IDs)
        resource.data.type == 'counter'
      );
      
      // Allow users to create their own documents or counter documents (during transactions)
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.userId ||
        request.resource.data.type == 'counter'
      );
      
      // Allow users to update their own documents or counter documents
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        resource.data.type == 'counter' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Allow users to delete their own documents
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Rules for Incident Reports 
    match /incidents/{incidentId} {
      allow read: if request.auth != null; // Only authenticated users can read
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId; // Only logged-in users can create
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      ); // Only creator or admin can update/delete
    }
  }
}
