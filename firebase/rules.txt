rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
        match /users/{docId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(docId)).data.role == 'admin'
      );
      
      // Sub-collections for FindMe feature
      match /locations/{locationId} {
        // Allow read if family sharing is enabled and user is trusted contact
        allow read: if request.auth != null && (
          // Owner can always read their own data
          request.auth.uid == docId ||
          // Trusted contact can read if family sharing is enabled, they are verified, and have location access
          (get(/databases/$(database)/documents/users/$(docId)).data.familySharingEnabled == true &&
           exists(/databases/$(database)/documents/users/$(docId)/trustedContacts/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(docId)/trustedContacts/$(request.auth.uid)).data.isVerified == true &&
           get(/databases/$(database)/documents/users/$(docId)/trustedContacts/$(request.auth.uid)).data.canAccessLocation == true)
        );
        
        // Only the location service can write location data
        allow write: if request.auth != null && request.auth.uid == docId;
      }
      
      match /trustedContacts/{contactId} {
        // Owner can manage their trusted contacts
        allow read, write: if request.auth != null && request.auth.uid == docId;
      }
    }

    // Missing Persons: public read, only owners or admins can modify
    match /missingPersons/{docId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        (resource.data.userId != null && request.auth.uid == resource.data.userId) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

              // Reports: public read, only creators or admins can write
          match /reports/{reportId} {
            // Allow anyone to read
            allow read: if true;

            // Allow any authenticated user to create a report
            allow create: if request.auth != null;

            // Allow only the report creator or an admin to update/delete
            allow update, delete: if request.auth != null && (
              request.auth.uid == resource.data.uid || // Matches the uid field in report
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin"
            );
          }

    // Rules for incidents collection
    match /incidents/{incidentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }


    // Sequences: authenticated users only
    match /sequences/{sequenceId} {
      allow read, write: if request.auth != null;
    }
    
           match /UnderInvestigation/{docId} {
        allow read, write: if true;
      }

    match /archivedCases/{docId} {
      // Allow read and create if the user is authenticated
      allow read, create: if request.auth != null;

      // Allow update and delete if:
      // - the user is the owner of the document (matches userId in the existing doc)
      // - OR the user has role 'admin'
      allow update, delete: if request.auth != null && (
        (resource.data.userId == request.auth.uid) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
  }
}