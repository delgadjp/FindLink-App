rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
        match /users/{docId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(docId)).data.role == 'admin'
      );
      
      // ViewedLiftingForms subcollection: allow users to read/write their own viewed forms
      match /viewedLiftingForms/{liftingFormId} {
        allow read, write: if request.auth != null && request.auth.uid == docId;
      }
    }
    
    // FindMe location tracking - separate top-level collection
    match /findMeLocations/{locationId} {
      // Allow users to read/write/delete their own location data
    	allow read, write, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Allow trusted contacts to read location data if they have permission
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/findMeTrustedContacts/$(request.auth.uid + '_' + resource.data.userId)) &&
        get(/databases/$(database)/documents/findMeTrustedContacts/$(request.auth.uid + '_' + resource.data.userId)).data.hasLocationAccess == true;
    }
    
    // FindMe trusted contacts - separate top-level collection
    match /findMeTrustedContacts/{contactId} {
			allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

  match /missingPersons/{docId} {
  allow read: if true;
  allow create: if request.auth != null;
  allow update, delete: if request.auth != null;
}
              // Reports: public read, only creators or admins can write
          match /reports/{reportId} {
            // Allow anyone to read
            allow read: if true;

            // Allow any authenticated user to create a report
            allow create: if request.auth != null;

            // Allow only the report creator or an admin to update/delete
            allow update, delete: if request.auth != null && (
              request.auth.uid == resource.data.uid || // Matches the uid field in report
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin"
            );
          }

    // Rules for incidents collection
    match /incidents/{incidentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }
     match /imageHashes/{docId} {
      allow read, write: if request.auth != null;
    }

    // Saved reporting person data - users can only access their own data
    match /savedReportingPersonData/{docId} {
      // Allow create if user is authenticated and the userId field matches auth uid
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
        
      // Allow read, update, delete if user is authenticated and owns the document
      allow read, update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
        
      // Allow queries/list operations for authenticated users
      allow list: if request.auth != null;
      
      // Allow get operations for authenticated users (for document existence checks)
      allow get: if request.auth != null;
    }

    // Sequences: authenticated users only
    match /sequences/{sequenceId} {
      allow read, write: if request.auth != null;
    }
    
           match /UnderInvestigation/{docId} {
        allow read, write: if true;
      }

    match /archivedCases/{docId} {
      // Allow read and create if the user is authenticated
      allow read, create: if request.auth != null;

      // Allow update and delete if:
      // - the user is the owner of the document (matches userId in the existing doc)
      // - OR the user has role 'admin'
      allow update, delete: if request.auth != null && (
        (resource.data.userId == request.auth.uid) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    match /photos/{photoId} {
      allow read: if true; // Public read access
      allow create: if request.auth != null; // Only authenticated users can upload
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || // Only the owner can modify
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' // Admin access
      );
    }
    
      // CaseEvidence: public read, only owners or admins can modify
    match /CaseEvidence/{docId} {
      allow read: if true; // Public read, or use: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        (resource.data.userId == request.auth.uid) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    
    match /liftingform/{docId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;

      // Allow create access only for authenticated users
      allow create: if request.auth != null;

      // Allow update and delete access only for:
      // - The owner of the document (matches userId in the document)
      // - OR users with the 'admin' role
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || // Owner of the document
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' // Admin access
      );
    }
  }
}